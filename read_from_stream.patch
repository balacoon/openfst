Only in .: read_from_stream.patch
diff -ru ../openfst-1.6.0.orig/src/include/fst/extensions/far/far.h ./src/include/fst/extensions/far/far.h
--- ../openfst-1.6.0.orig/src/include/fst/extensions/far/far.h	2019-09-28 02:19:04.123278934 +0200
+++ ./src/include/fst/extensions/far/far.h	2019-10-05 18:47:03.435088500 +0200
@@ -271,6 +271,13 @@
     return new STTableFarReader(reader);
   }
 
+  static STTableFarReader *Open(std::istream *stream) {
+    STTableReader<Fst<A>, FstReader<A>> *reader =
+        STTableReader<Fst<A>, FstReader<A>>::Open(stream);
+    // TODO: error check
+    return new STTableFarReader(reader);
+  }
+
   static STTableFarReader *Open(const std::vector<string> &filenames) {
     STTableReader<Fst<A>, FstReader<A>> *reader =
         STTableReader<Fst<A>, FstReader<A>>::Open(filenames);
diff -ru ../openfst-1.6.0.orig/src/include/fst/extensions/far/sttable.h ./src/include/fst/extensions/far/sttable.h
--- ../openfst-1.6.0.orig/src/include/fst/extensions/far/sttable.h	2019-09-28 02:19:04.123278934 +0200
+++ ./src/include/fst/extensions/far/sttable.h	2019-10-05 18:47:11.210902478 +0200
@@ -105,47 +105,20 @@
 
   explicit STTableReader(const std::vector<string> &filenames)
       : sources_(filenames), error_(false) {
-    compare_.reset(new Compare(&keys_));
-    keys_.resize(filenames.size());
     streams_.resize(filenames.size(), 0);
-    positions_.resize(filenames.size());
     for (size_t i = 0; i < filenames.size(); ++i) {
       streams_[i] = new std::ifstream(
           filenames[i].c_str(), std::ios_base::in | std::ios_base::binary);
-      int32 magic_number = 0, file_version = 0;
-      ReadType(*streams_[i], &magic_number);
-      ReadType(*streams_[i], &file_version);
-      if (magic_number != kSTTableMagicNumber) {
-        FSTERROR() << "STTableReader::STTableReader: Wrong file type: "
-                   << filenames[i];
-        error_ = true;
-        return;
-      }
-      if (file_version != kSTTableFileVersion) {
-        FSTERROR() << "STTableReader::STTableReader: Wrong file version: "
-                   << filenames[i];
-        error_ = true;
-        return;
-      }
-      int64 num_entries;
-      streams_[i]->seekg(-static_cast<int>(sizeof(int64)), ios_base::end);
-      ReadType(*streams_[i], &num_entries);
-      if (num_entries > 0) {
-        streams_[i]->seekg(-static_cast<int>(sizeof(int64)) * (num_entries + 1),
-                           ios_base::end);
-        positions_[i].resize(num_entries);
-        for (size_t j = 0; (j < num_entries) && (!streams_[i]->fail()); ++j)
-          ReadType(*streams_[i], &(positions_[i][j]));
-        streams_[i]->seekg(positions_[i][0]);
-        if (streams_[i]->fail()) {
-          FSTERROR() << "STTableReader::STTableReader: Error reading file: "
-                     << filenames[i];
-          error_ = true;
-          return;
-        }
-      }
     }
-    MakeHeap();
+    Init();
+  }
+
+  explicit STTableReader(std::vector<std::istream*> &streams) : error_(false) {
+    for (size_t i = 0; i < streams.size(); ++i) {
+      sources_.push_back("stream" + std::to_string(i));
+      streams_.push_back(streams[i]);
+    }
+    Init(); 
   }
 
   ~STTableReader() {
@@ -162,6 +135,12 @@
     return new STTableReader<T, R>(filenames);
   }
 
+  static STTableReader<T, R> *Open(std::istream *stream) {
+    std::vector<std::istream*> streams;
+    streams.push_back(stream);
+    return new STTableReader<T, R>(streams);
+  }
+
   static STTableReader<T, R> *Open(const std::vector<string> &filenames) {
     return new STTableReader<T, R>(filenames);
   }
@@ -207,6 +186,48 @@
   bool Error() const { return error_; }
 
  private:
+
+  void Init() {
+    compare_.reset(new Compare(&keys_));
+    keys_.resize(sources_.size());
+    positions_.resize(sources_.size());
+    for (size_t i = 0; i < sources_.size(); ++i) {
+      int32 magic_number = 0, file_version = 0;
+      ReadType(*streams_[i], &magic_number);
+      ReadType(*streams_[i], &file_version);
+      if (magic_number != kSTTableMagicNumber) {
+        FSTERROR() << "STTableReader::STTableReader: Wrong file type: "
+                   << sources_[i];
+        error_ = true;
+        return;
+      }
+      if (file_version != kSTTableFileVersion) {
+        FSTERROR() << "STTableReader::STTableReader: Wrong file version: "
+                   << sources_[i];
+        error_ = true;
+        return;
+      }
+      int64 num_entries;
+      streams_[i]->seekg(-static_cast<int>(sizeof(int64)), ios_base::end);
+      ReadType(*streams_[i], &num_entries);
+      if (num_entries > 0) {
+        streams_[i]->seekg(-static_cast<int>(sizeof(int64)) * (num_entries + 1),
+                           ios_base::end);
+        positions_[i].resize(num_entries);
+        for (size_t j = 0; (j < num_entries) && (!streams_[i]->fail()); ++j)
+          ReadType(*streams_[i], &(positions_[i][j]));
+        streams_[i]->seekg(positions_[i][0]);
+        if (streams_[i]->fail()) {
+          FSTERROR() << "STTableReader::STTableReader: Error reading file: "
+                     << sources_[i];
+          error_ = true;
+          return;
+        }
+      }
+    }
+    MakeHeap();
+  }
+
   // Comparison functor used to compare stream IDs in the heap
   struct Compare {
     explicit Compare(const std::vector<string> *k) : keys(k) {}
